# 2021-03 : Initial code [N. Jourdain, IGE-CNRS]
#====================================================================================================
import numpy as np
import sys

#====================================================================================================
def grid_bounds_oce(region='Amundsen'):
   """ Gives minimum and maximum longitude and latitude for the common MISOMIP2 ocean grid

       region: 'Amundsen' (default) or 'Weddell'

       exemple: [lonmin,lonmax,latmin,latmax] = grid_bounds_oce(region='Amundsen')
   """
   if ( region == 'Amundsen' ):
     longitude_min = -140.0
     longitude_max =  -90.0
     latitude_min  =  -76.0
     latitude_max  =  -69.0
   elif ( region == 'Weddell' ):
     longitude_min = -90.0
     longitude_max =   0.0
     latitude_min  = -85.0
     latitude_max  = -60.0
   else:
     sys.exit("~!@#$%^* error : region is not defined, choose either 'Amundsen' or 'Weddell'")

   return [longitude_min,longitude_max,latitude_min,latitude_max]

#====================================================================================================
def generate_3d_grid_oce(region='Amundsen'):
   """Generates (longitude, latitude, depth) of the common MISOMIP2 3d ocean grid

      region: 'Amundsen' (default) or 'Weddell'

      exemple: [lon,lat,depth]=generate_3d_grid_oce(region='Amundsen')
   """

   [lonmin,lonmax,latmin,latmax] = grid_bounds_oce(region=region)

   if ( region == 'Amundsen' ):
     longitude=np.arange(lonmin,lonmax+0.1,0.1)
     latitude=np.arange(latmin,latmax+1./30.,1./30.)
     depth=np.array([0., 100., 200., 300., 400., 500., 600., 700., 800., 900., 1000., 1500.])
   elif ( region == 'Weddell' ):
     longitude=np.arange(lonmin,lonmax+1./3.,1./3.)
     latitude=np.arange(latmin,latmax+1./10.,1./10.)
     depth=np.array([0., 100., 200., 300., 400., 500., 600., 700., 800., 900., 1000., 1500.])
   else:
     sys.exit("~!@#$%^* error : region is not defined, choose either 'Amundsen' or 'Weddell'")

   return [longitude,latitude,depth]

#====================================================================================================
def generate_section_grid_oce(region='Amundsen',section=1):
   """Generates (longitude, latitude, depth) of the common MISOMIP2 ocean section

      region: 'Amundsen' (default), 'Weddell'

      section: 1 (default) -> Pine Island Trough for Amundsen
                           -> Filchner Ice Shelf front for Weddell
               2           -> Dotson Trough for Amundsen
                           -> Ronne Ice Shelf front for Weddell
               3           -> /not defined/ for Amundsen
                           -> section at 76degS for Weddell

      exemple: [lon,lat,depth]=generate_section_grid_oce(region='Amundsen')
   """

   if ( region == 'Amundsen' & section == 1 ): # Pine Island Trough
     longitude=np.array([  -97.643,  -97.994,  -98.344,  -98.694,  -99.045,  -99.395,  -99.746, -100.096,
                          -100.446, -100.797, -101.147, -101.497, -101.847, -102.056, -102.264, -102.473,
                          -102.681, -102.890, -103.098, -103.306, -103.515, -103.723, -103.932, -104.069,
                          -104.150, -104.231, -104.311, -104.392, -104.472, -104.553, -104.633, -104.714,
                          -104.795, -104.875, -105.005, -105.147, -105.288, -105.430, -105.572, -105.713,
                          -105.855, -105.997, -106.138, -106.280, -106.349, -106.371, -106.393, -106.416,
                          -106.438, -106.460, -106.483, -106.505, -106.528, -106.550, -106.572, -106.595,
                          -106.617, -106.639, -106.662, -106.684, -106.707, -106.716, -106.687, -106.659,
                          -106.630, -106.602, -106.573, -106.545, -106.516, -106.488, -106.460, -106.431,
                          -106.403, -106.374, -106.330, -106.230, -106.130, -106.030, -105.930, -105.830,
                          -105.730, -105.630, -105.530, -105.430, -105.330, -105.230, -105.130, -105.030,
                          -104.942, -104.873, -104.803, -104.733, -104.663, -104.593, -104.523, -104.454,
                          -104.384, -104.314, -104.244, -104.174, -104.104, -104.017, -103.929, -103.841,
                          -103.753, -103.665, -103.578, -103.490, -103.402, -103.314, -103.226, -103.138,
                          -103.050, -103.003, -102.963, -102.923, -102.883, -102.843, -102.803, -102.763,
                          -102.724, -102.684, -102.644, -102.604, -102.563, -102.518, -102.472, -102.427,
                          -102.382, -102.338, -102.294, -102.251, -102.208, -102.164, -102.121, -102.104,
                          -102.093, -102.082, -102.071, -102.059, -102.048, -102.037, -102.026, -102.014,
                          -102.003, -101.992, -101.981, -101.969, -101.958, -101.947, -101.936, -101.942,
                          -101.951, -101.960, -101.969, -101.978, -101.987, -101.996, -102.005, -102.015,
                          -102.024, -102.033, -102.042, -102.051, -102.060 ])
     latitude=np.arange(-75.5+1./30.,-70.0+1./30.,1./30.) 
     depth=np.arange(0.,1990.,5.)
   elif ( region == 'Amundsen' & section == 2 ): # Dotson Trough
     longitude=np.array([ -114.313, -114.127, -113.940, -113.753, -113.567, -113.380, -113.193, -113.058,
                          -112.975, -112.892, -112.808, -112.725, -112.642, -112.575, -112.525, -112.475,
                          -112.425, -112.375, -112.325, -112.318, -112.353, -112.389, -112.424, -112.460,
                          -112.495, -112.538, -112.587, -112.635, -112.684, -112.733, -112.781, -112.830,
                          -112.878, -112.927, -112.975, -113.024, -113.079, -113.177, -113.275, -113.373,
                          -113.471, -113.569, -113.667, -113.765, -113.863, -113.961, -114.076, -114.208,
                          -114.340, -114.472, -114.604, -114.735, -114.867, -114.999, -115.123, -115.247,
                          -115.371, -115.495, -115.619, -115.743, -115.867, -115.991, -116.115, -116.239,
                          -116.363, -116.487, -116.580, -116.669, -116.758, -116.847, -116.936, -117.025,
                          -117.114, -117.203, -117.292, -117.381, -117.470, -117.559, -117.648, -117.730,
                          -117.785, -117.840, -117.896, -117.951, -118.006, -118.061, -118.117, -118.172,
                          -118.227, -118.282, -118.338, -118.393, -118.448 ])
     latitude=np.arange(-75.05+1./30.,-71.95+1./30.,1./30.)
     depth=np.arange(0.,1505.,5.)   
   elif ( region == 'Weddell' & section == 1 ): # Filchner
     longitude=np.arange(-45.6,-34.2,0.1)
     latitude=np.array([-77.05925666, -77.04064592, -77.02203517, -77.00727515, -76.99270362,
                        -76.97813210, -76.96356058, -76.94898905, -76.93441753, -76.91984600,
                        -76.90527448, -76.89070296, -76.87613143, -76.88288185, -76.89059808,
                        -76.89831430, -76.90603053, -76.91374675, -76.92292542, -76.95501578,
                        -76.98710613, -77.01919649, -77.05128684, -77.08271255, -77.11318838,
                        -77.14366421, -77.17414004, -77.20461587, -77.24215412, -77.27970416,
                        -77.31725420, -77.35480424, -77.38939519, -77.42340140, -77.45740761,
                        -77.49141382, -77.53404535, -77.58397522, -77.63390510, -77.68383497,
                        -77.70809538, -77.73174253, -77.75538967, -77.77903682, -77.79129388,
                        -77.79121167, -77.79112947, -77.79104727, -77.79138958, -77.79230625,
                        -77.79322292, -77.79413958, -77.79468290, -77.79472110, -77.79475929,
                        -77.79479749, -77.79476538, -77.79366345, -77.79256152, -77.79145960,
                        -77.79035767, -77.79098873, -77.79198316, -77.79297759, -77.79397202,
                        -77.79740382, -77.80222657, -77.80704933, -77.81187208, -77.81577907,
                        -77.81905841, -77.82233775, -77.82561708, -77.83192964, -77.84329756,
                        -77.85466549, -77.86603341, -77.87426940, -77.88191621, -77.88956302,
                        -77.89720983, -77.89000677, -77.88109238, -77.87217799, -77.86377906,
                        -77.85916012, -77.85454119, -77.84992225, -77.84530331, -77.83908637,
                        -77.83244465, -77.82580293, -77.81924423, -77.81296876, -77.80669329,
                        -77.80041782, -77.79375675, -77.78465978, -77.77556281, -77.76646584,
                        -77.75736888, -77.74760371, -77.73355708, -77.71951046, -77.70388392,
                        -77.68527983, -77.66667575, -77.64807166, -77.62946757, -77.61086349,
                        -77.59225940, -77.54534302, -77.46934913, -77.41716667])
     depth=np.arange(0.,1175.,10.)
   elif ( region == 'Weddell' & section == 2 ): # Ronne
     longitude=np.arange(-61.0,-46.9,0.1)
     latitude=np.array([ -74.7388049, -74.7696137, -74.8004225, -74.8187727, -74.83695455,
                         -74.8551363, -74.8733181, -74.8954805, -74.9250897, -74.95469898,
                         -74.9840514, -75.0018099, -75.0195684, -75.0373270, -75.05508554,
                         -75.0728440, -75.0906026, -75.1083611, -75.1261196, -75.14387818,
                         -75.1667105, -75.1909189, -75.2151273, -75.2393357, -75.26354409,
                         -75.2781287, -75.2915440, -75.3049594, -75.3183747, -75.33179014,
                         -75.3452055, -75.3586208, -75.3720362, -75.3872945, -75.40444565,
                         -75.4215967, -75.4387478, -75.4558989, -75.4730500, -75.49020116,
                         -75.5073522, -75.5268537, -75.5497608, -75.5726678, -75.59557498,
                         -75.6149392, -75.6333332, -75.6517272, -75.6701211, -75.68851516,
                         -75.7069091, -75.7253031, -75.7436970, -75.7620910, -75.78265730,
                         -75.8040894, -75.8255215, -75.8469536, -75.8683857, -75.88981792,
                         -75.9112500, -75.9326821, -75.9541142, -75.9755464, -75.98806664,
                         -75.9959958, -76.0039251, -76.0118543, -76.0197836, -76.03376924,
                         -76.0727567, -76.1117443, -76.1507318, -76.1897193, -76.18515166,
                         -76.1685367, -76.1519218, -76.1822453, -76.2489530, -76.31566072,
                         -76.3823684, -76.4490761, -76.5041048, -76.4911835, -76.49873840,
                         -76.5416613, -76.5845842, -76.6275071, -76.6704300, -76.71335290,
                         -76.7403367, -76.7554590, -76.7705813, -76.7857036, -76.80082600,
                         -76.8159483, -76.8310706, -76.8461929, -76.8613152  -76.87643751,
                         -76.8915598, -76.9066821, -76.9362906, -76.9660455, -76.99580037,
                         -77.0239363, -77.0189998, -77.0140633, -77.0091268, -77.00419038,
                         -76.9992539, -76.9943174, -76.9893809, -76.9844444, -76.97950799,
                         -76.9906303, -77.0042948, -77.0179593, -77.0316238, -77.04528839,
                         -77.0589529, -77.0726174, -77.0862819, -77.0999464, -77.11361094,
                         -77.1272754, -77.1406464, -77.1396333, -77.1386202, -77.13760719,
                         -77.1365941, -77.1355810, -77.1345679, -77.1335549  -77.13254183,
                         -77.1315287, -77.1305156, -77.1295026, -77.1284895, -77.12747647,
                         -77.1264634, -77.1254503, -77.12516667])
     depth=np.arange(0.,650.,5.)
   elif ( region == 'Weddell' & section == 3 ): # section 76°S
     longitude=np.arange(-32.7,-28.9,0.1)
     latitude=np.zeros_like(longitude)-76.00000000
     depth=np.arange(0.,755.,5.)
   else:
     sys.exit("~!@#$%^* error : region is not defined, choose either 'Amundsen' or 'Weddell'")

   if ( np.size(latitude) != np.size(longitude) ):
     sys.exit("~!@#$%^* error : section must be defined with equal longitude and latitude values")

   return [longitude,latitude,depth]

#====================================================================================================
def generate_mooring_grid_oce(region='Amundsen',mooring=1):
   """Generates (longitude, latitude, depth) of the common MISOMIP2 mooring

      region: 'Amundsen' (default), 'Weddell'

      mooring: 1 -> BSE-ISTAR (Pine Island) for Amundsen
               1 -> AWI_252 for Weddell
               2 -> AWI_253 for Weddell
               3 -> AWI_254 for Weddell

      exemple: [lon,lat,depth]=generate_mooring_grid_oce(region='Amundsen')
   """

   if ( region == 'Amundsen' & mooring == 1 ): # PIG
     longitude=np.array([ -102.15437 ])
     latitude=np.array([ -75.05528 ])
     depth=np.arange(300.,821.,1.)
   elif ( region == 'Weddell' & mooring == 1 ): # AWI_252
     longitude=np.array([ -30.47025 ])
     latitude=np.array([ -76.09135 ])
     depth=np.array([335.155716177651, 421.198718872697])
   elif ( region == 'Weddell' & mooring == 2 ): # AWI_253
     longitude=np.array([ -30.99475 ])
     latitude=np.array([ -76.0459 ])
     depth=np.array([348.910332481771, 433.794506934268])
   elif ( region == 'Weddell' & mooring == 3 ): # AWI_254
     longitude=np.array([ -31.48375 ]) 
     latitude=np.array([ -75.9624 ]) 
     depth=np.array([ 553.0090827338 ])
   else:
     sys.exit("~!@#$%^* error : region is not defined, choose either 'Amundsen' or 'Weddell'")

   return [longitude,latitude,depth]

